import { LendingProtocol } from './lending-protocol';
import * as common from '@protocolink/common';
import { expect } from 'chai';
import { gnosisTokens, mainnetTokens } from 'src/protocols/spark/tokens';

describe('Test Spark LendingProtocol', function () {
  context('Test getPortfolio', function () {
    const testCases = [
      {
        chainId: common.ChainId.mainnet,
        account: '0x8bf7058bfe4cf0d1fdfd41f43816c5555c17431d',
        blockTag: 19011300,
        expected: {
          chainId: 1,
          protocolId: 'spark',
          marketId: 'mainnet',
          utilization: '0.49781972433322992467',
          healthRate: '2.07153302609943033468',
          netAPY: '-0.01307866074810781196',
          totalSupplyUSD: '1255886.42608593415570759873263688',
          totalBorrowUSD: '500164.027542356064665582',
          supplies: [
            {
              token: mainnetTokens.DAI,
              price: '1',
              balance: '0',
              apy: '0.05330994502077421664',
              usageAsCollateralEnabled: true,
              ltv: '0',
              liquidationThreshold: '0.0001',
              isNotCollateral: false,
              supplyCap: '0',
              totalSupply: '797258503.957984054071228849',
            },
            {
              token: mainnetTokens.sDAI,
              price: '1.05149253',
              balance: '0',
              apy: '0',
              usageAsCollateralEnabled: true,
              ltv: '0.74',
              liquidationThreshold: '0.76',
              isNotCollateral: false,
              supplyCap: '0',
              totalSupply: '114380869.644597763374155541',
            },
            {
              token: mainnetTokens.USDC,
              price: '1.00008597',
              balance: '0',
              apy: '0.0429717483966223299',
              usageAsCollateralEnabled: false,
              ltv: '0',
              liquidationThreshold: '0',
              isNotCollateral: false,
              supplyCap: '60000000',
              totalSupply: '491795.076835',
            },
            {
              token: mainnetTokens.USDT,
              price: '0.99974559',
              balance: '0',
              apy: '0.02628720369558140623',
              usageAsCollateralEnabled: false,
              ltv: '0',
              liquidationThreshold: '0',
              isNotCollateral: false,
              supplyCap: '30000000',
              totalSupply: '99515.425099',
            },
            {
              token: mainnetTokens.ETH,
              price: '2511.57322604',
              balance: '500.039741252574001622',
              apy: '0.01413885912447143025',
              usageAsCollateralEnabled: true,
              ltv: '0.8',
              liquidationThreshold: '0.825',
              isNotCollateral: false,
              supplyCap: '0',
              totalSupply: '250480.501781157058053475',
            },
            {
              token: mainnetTokens.wstETH,
              price: '2897.5275624',
              balance: '0',
              apy: '0.00000024900689299442',
              usageAsCollateralEnabled: true,
              ltv: '0.685',
              liquidationThreshold: '0.795',
              isNotCollateral: false,
              supplyCap: '800000',
              totalSupply: '472056.651339893008720507',
            },
            {
              token: mainnetTokens.rETH,
              price: '2751.22029666',
              balance: '0',
              apy: '0.00000003652120308756',
              usageAsCollateralEnabled: true,
              ltv: '0.685',
              liquidationThreshold: '0.795',
              isNotCollateral: false,
              supplyCap: '80000',
              totalSupply: '37448.304770136571365709',
            },
            {
              token: mainnetTokens.WBTC,
              price: '42674.08044271',
              balance: '0',
              apy: '0.00001033548496045867',
              usageAsCollateralEnabled: true,
              ltv: '0.7',
              liquidationThreshold: '0.75',
              isNotCollateral: false,
              supplyCap: '3000',
              totalSupply: '2999.99785194',
            },
          ],
          borrows: [
            {
              token: mainnetTokens.DAI,
              price: '1',
              balances: ['500164.027542356064665582', '0'],
              apys: ['0.05526314689378971429', '0'],
              borrowMin: '0',
              borrowCap: '0',
              totalBorrow: '770088175.922699742211700122',
            },
            {
              token: mainnetTokens.USDC,
              price: '1.00008597',
              balances: ['0', '0'],
              apys: ['0.04770004536919663287', '0.04580838881739773619'],
              borrowMin: '0',
              borrowCap: '0',
              totalBorrow: '467635.885281',
            },
            {
              token: mainnetTokens.USDT,
              price: '0.99974559',
              balances: ['0', '0'],
              apys: ['0.03653695022630783836', '0.04580838881739773619'],
              borrowMin: '0',
              borrowCap: '0',
              totalBorrow: '75779.360338',
            },
            {
              token: mainnetTokens.ETH,
              price: '2511.57322604',
              balances: ['0', '0'],
              apys: ['0.02318783322499370895', '0.03251750528835507089'],
              borrowMin: '0',
              borrowCap: '1400000',
              totalBorrow: '161512.555422898470739346',
            },
            {
              token: mainnetTokens.wstETH,
              price: '2897.5275624',
              balances: ['0', '0'],
              apys: ['0.00251482042382401295', '0.04602785987513300031'],
              borrowMin: '0',
              borrowCap: '3000',
              totalBorrow: '55.058630749824329394',
            },
            {
              token: mainnetTokens.rETH,
              price: '2751.22029666',
              balances: ['0', '0'],
              apys: ['0.00008175674393140419', '0.07250818117089440143'],
              borrowMin: '0',
              borrowCap: '2400',
              totalBorrow: '19.681367302343928653',
            },
            {
              token: mainnetTokens.WBTC,
              price: '42674.08044271',
              balances: ['0', '0'],
              apys: ['0.00065644930648120513', '0.0202013400202857357'],
              borrowMin: '0',
              borrowCap: '2000',
              totalBorrow: '59.0611296',
            },
          ],
        },
      },
      {
        chainId: common.ChainId.gnosis,
        account: '0xed374ece52ab111bdbaee9f1013429f474c883ba',
        blockTag: 32080906,
        expected: {
          chainId: 100,
          protocolId: 'spark',
          marketId: 'gnosis',
          utilization: '0.01125079489525423734',
          healthRate: '95.23136901831888660931',
          netAPY: '0.03686176535185509126',
          totalSupplyUSD: '0.51030070011483266181462544',
          totalBorrowUSD: '0.00401890175443305345112904',
          supplies: [
            {
              token: gnosisTokens.xDAI,
              price: '0.99977168',
              balance: '0.510416876042322972',
              apy: '0.03665069818130247227',
              usageAsCollateralEnabled: true,
              ltv: '0.7',
              liquidationThreshold: '0.75',
              isNotCollateral: false,
              supplyCap: '10000000',
              totalSupply: '5140472.299732771854592572',
            },
            {
              token: gnosisTokens.WETH,
              price: '2326.58361829',
              balance: '0',
              apy: '0.00367024533465304926',
              usageAsCollateralEnabled: true,
              ltv: '0.7',
              liquidationThreshold: '0.75',
              isNotCollateral: false,
              supplyCap: '5000',
              totalSupply: '1592.027746221112440732',
            },
            {
              token: gnosisTokens.wstETH,
              price: '2686.20280424',
              balance: '0.000000000134931602',
              apy: '0.00000083279833730894',
              usageAsCollateralEnabled: true,
              ltv: '0.65',
              liquidationThreshold: '0.725',
              isNotCollateral: false,
              supplyCap: '10000',
              totalSupply: '7113.682317046677112557',
            },
            {
              token: gnosisTokens.GNO,
              price: '203.567668',
              balance: '0',
              apy: '0',
              usageAsCollateralEnabled: false,
              ltv: '0.4',
              liquidationThreshold: '0.5',
              isNotCollateral: false,
              supplyCap: '200000',
              totalSupply: '46300.216862020861338737',
            },
          ],
          borrows: [
            {
              token: gnosisTokens.xDAI,
              price: '0.99977168',
              balances: ['0', '0'],
              apys: ['0.04999999999999999996', '0'],
              borrowMin: '0',
              borrowCap: '8000000',
              totalBorrow: '3792453.862025050101532283',
            },
            {
              token: gnosisTokens.WETH,
              price: '2326.58361829',
              balances: ['0', '0'],
              apys: ['0.01210311453632419971', '0.03251750528835507089'],
              borrowMin: '0',
              borrowCap: '3000',
              totalBorrow: '538.718917561706980532',
            },
            {
              token: gnosisTokens.wstETH,
              price: '2686.20280424',
              balances: ['0.000001496127451021', '0'],
              apys: ['0.01005817189181808508', '0.03045453393881288111'],
              borrowMin: '0',
              borrowCap: '100',
              totalBorrow: '0.845663757840502146',
            },
          ],
        },
      },
    ];

    testCases.forEach(({ chainId, account, blockTag, expected }) => {
      it(`${common.toNetworkId(chainId)} market`, async function () {
        const protocol = new LendingProtocol(chainId);
        protocol.setBlockTag(blockTag);
        const portfolio = await protocol.getPortfolio(account);
        expect(JSON.stringify(portfolio)).to.eq(JSON.stringify(expected));
      }).timeout(30000);
    });
  });
});
